from collections import deque
class Graph :
    dict = {}
    path = {}
    def add_road (self, key, value, directType):
        if not (key in self.dict):
            if (directType == True) :
                self.dict[key] = {value}
                self.dict[value] = {key}
            else:
                self.dict[key] = {value}
        else:

            if(directType == True) :
                self.dict[key].add(value)
                self.dict[value].add(key)
            else:
                self.dict[key].add(value)

    def add_node (self, key) :
        if not(key in self.dict) :
            self.dict[key] = set()
            self.path[key] = set()

    def showGraph (self) :
        print(self.dict)
        print(self.path)

    def removeNode (self, town) :
        self.dict.pop(town)
        self.path.pop(town)
        for key in self.dict :
            try :
                self.dict[key].remove(town)
            except :
                pass

    def checkConnect(self, a, b):
        q = deque()
        d = {key: 0 for key in self.dict}
        q.append(a)
        d[a] = 1
        while len(q) > 0:
            v = q.popleft()
            for to in self.dict[v]:
                if d[to] == 0:
                    d[to] = d[v] + 1
                    q.append(to)
        return (d[b] - 1 > 0)

graph = Graph()
p = []
pred = []
arg = []
x = []
i = 0
while i<1000:
    p = input()
    if (p[0] == "?"):
        if (p.find(",")>0):
            pos_pr = p[1:p.find("(")]
            pos_arg1 = p[p.find("(")+1:p.find(",")]
            pos_arg2 = p[p.find(",")+1:p.find(")")]
            if (pos_arg1 in arg)&(pos_arg2 in arg):
                if graph.checkConnect(pos_arg1,pos_arg2):
                    print(True)
                else:
                    print(False)
            else:
                print(False)
        else:
            pos_pr = p[1:p.find("(")]
            pos_arg = p[p.find("(") + 1:p.find(")")]
            if (pos_pr in pred)&(pos_arg in arg):
                if graph.checkConnect(pos_pr,pos_arg):
                    print(True)
                else:
                    print(False)
            else:
                print(False)
    elif (p[0] == "!"):
        break
    else:
        pred.append(p[0:p.find("(")])
        if ("\"" in p):
            if("," in p):
                arg.append(p[p.find("(") + 2:p.find(",")-1])
                graph.add_node(pred[i])
                graph.add_node(arg[i])
                i = i+1
                arg.append(p[p.find((","))+2:p.find(")")-1])
                graph.add_node(arg[i])
                graph.add_road(arg[i-1], arg[i], False)
            else:
                arg.append(p[p.find("(") + 2:p.find(")") - 1])
                graph.add_node(pred[i])
                graph.add_node(arg[i])
                graph.add_road(pred[i], arg[i], False)
                i = i+1

